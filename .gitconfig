[color]
  diff   = auto
  status = auto
  branch = auto
  ui     = true

[core]
  excludesfile = ~/.gitignore
  editor       = vim
  whitespace   = cr-at-eol

[apply]
  whitespace = nowarn

[mergetool]
  keepBackup = false

[difftool]
  prompt = false

[help]
  autocorrect = 1

[pull]
  default = current

[push]
  default = current

[alias]
  alias = "!# Prints all aliases.;\n\
    git config --list \
    | egrep '^alias.+' \
    | sed -e 's/^alias\\.//' \
    | sed -e 's/^[^=]*=/\\'$'\\033[31m&\\033[(B\\033[m/' \
    | column -t -s'=' \
    | sed 's/!#* *//; s/;$//' \
    | cut -c1-85"
  s = status -s
  co = checkout
  cm = commit
  br = branch
  l = "log \
        --color --graph --decorate \
        --date=format:'%Y-%m-%d' \
        --abbrev-commit \
        --pretty=format:'%C(red)%h%C(auto)%d %s %C(green)(%cr)%C(bold blue) %an'"
  ld = "log \
        --color --graph --decorate \
        --date=format:'%Y-%m-%d %H:%M:%S' \
        --abbrev-commit \
        --pretty=format:'%C(red)%h%C(auto)%d %s %C(green)(%ad)%C(bold blue) %an'"
  ll = "log \
        --color --graph --decorate \
        --date=format:'%Y-%m-%d' \
        --abbrev-commit \
        --pretty=format:'%C(red)%H%C(auto)%d %s %C(green)(%cr)%C(bold blue) %an'"
  ranking = "!# List commit counts of contributors;\n\
        git shortlog -sn"
  ch = "!git checkout $(git bselect)"
  bselect = "! # select branch with preview; \n\
        f() { \
            _height=$(stty size | awk '{print $1}');\
            git branch | egrep -v '^\\*' | fzf --preview \"git l {1} | head -n $_height\"; \
        }; f"
  diff-info = "!# Print diff report.;\n\
        fileA=/tmp/git-s-$(uuidgen); \
        fileB=/tmp/git-diff-$(uuidgen); \
        git s | awk '{print $2,$1}' > $fileA; \
        git diff --numstat | awk '{print $3,$1,$2}' > $fileB; \
        join -t' ' -a 1 $fileA $fileB | awk '{print $2, \"(+\"$3 \",-\"$4\")\", $1}' | sed 's/(+,-)/./; s/^\\([^?]\\) *\\./\\1 STAGED/' | column -t -s' ' ; \
        rm -f $fileA $fileB; \
    "
  diff-select = "!# Select changed files to add them.;\n\
        f() { \
            git diff-info \
            | egrep -v '[^?] *STAGED ' \
            | fzf -m --header \"$(git diff --shortstat)\" --preview \
                \"if [[ {1} == '??' ]]; then bat {3}; else git diff --color=always {3}; fi\" \
            | awk '{print $3}'; \
        }; f"
  a = "! # add files with fzf preview diffs; \n\
        f() { \
            _height=$(stty size | awk '{print $1}');\
    git s | fzf -m --preview \"git diff {2} | head -n $_height | pygmentize -O style=monokai\" | awk '{print $2}' | xargs git add; \
        }; f"
  bb = "! # Branch tools. Type 'git bb help' ; \n\
        f() { \n\
            if [ $# = 0 ]; then \
                git bselect | xargs git checkout; \
            elif [ $1 = 'help' ]; then \
                echo 'git bb           : Select and checkout branch'; \
                echo 'git bb c, clean  : Clean all merged branches'; \
                echo 'git bb d, D      : Delete seleted branches(D: force)'; \
                echo 'git bb l, list   : List branches excluding the current branch'; \
                echo 'git bb m, merged : List merged branches excluding the current and master branches'; \
            elif [ $1 = 'd' -o $1 = 'D' ]; then \
                git branch -$1 $(git bb list | fzf -m); \
            elif [ $1 = 'clean' -o $1 = 'c' ]; then \
                git branch -d $(git bb merged); \
            elif [ $1 = 'list' -o $1 = 'l' ]; then \
                git branch | grep -v '^\\*'; \
            elif [ $1 = 'merged' -o $1 = 'm' ]; then \
                git branch --merged | grep -v '^\\*\\|\\<master$'; \
            else \
                git bb help; \
            fi; \
        }; f"

[diff]
  colorMoved = default

